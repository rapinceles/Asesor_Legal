# main_fixed.py - Versi√≥n corregida y completamente funcional
from fastapi import FastAPI, Form, Request, HTTPException
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from typing import Optional
import os
import json

app = FastAPI(title="MERLIN - Asesor Legal Ambiental Inteligente")

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configurar carpetas est√°ticas y plantillas HTML
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Variables de estado del sistema
print("üöÄ Iniciando MERLIN - Asesor Legal Ambiental")
print("‚ö†Ô∏è  Funcionando en modo simplificado (sin dependencias complejas)")

# Ruta ra√≠z que carga la interfaz visual
@app.get("/", response_class=HTMLResponse)
async def render_form(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# Endpoint unificado para todas las consultas
@app.post("/consulta")
async def consulta_unificada(request: Request):
    """
    Endpoint unificado que maneja todos los tipos de consulta
    """
    try:
        # Obtener datos JSON del request
        data = await request.json()
        query = data.get("query", "").strip()
        query_type = data.get("query_type", "general")
        company_name = data.get("company_name", "").strip()
        project_location = data.get("project_location", "").strip()
        
        if not query:
            return JSONResponse({
                "success": False,
                "error": "La consulta no puede estar vac√≠a"
            }, status_code=400)
        
        # Procesar seg√∫n el tipo de consulta
        if query_type == "general":
            # An√°lisis general
            respuesta = generar_respuesta_legal_general(query)
            referencias = generar_referencias_legales(query)
            
            return JSONResponse({
                "success": True,
                "respuesta": respuesta,
                "referencias": referencias
            })
            
        elif query_type in ["empresa", "proyecto"]:
            # An√°lisis empresarial/proyecto
            if not company_name:
                return JSONResponse({
                    "success": False,
                    "error": "El nombre de la empresa es requerido"
                }, status_code=400)
            
            respuesta = generar_respuesta_empresarial(company_name, query, query_type, project_location)
            
            response_data = {
                "success": True,
                "respuesta": respuesta,
                "empresa_info": {
                    "nombre": company_name,
                    "tipo": query_type,
                    "estado": "An√°lisis completado"
                },
                "referencias": generar_referencias_ambientales(query)
            }
            
            # Agregar informaci√≥n de ubicaci√≥n si est√° disponible
            if project_location:
                response_data["ubicacion"] = {
                    "direccion": project_location,
                    "tipo": "Ubicaci√≥n del Proyecto",
                    "coordenadas": "Ver en mapa para detalles"
                }
            
            return JSONResponse(response_data)
        
    except Exception as e:
        return JSONResponse({
            "success": False,
            "error": f"Error al procesar la consulta: {str(e)}"
        }, status_code=500)

def generar_respuesta_legal_general(query: str) -> str:
    """Genera respuestas legales generales basadas en la consulta"""
    query_lower = query.lower()
    
    if any(word in query_lower for word in ['agua', 'hidrico', 'recurso hidrico']):
        return """**Marco Legal de Recursos H√≠dricos en Chile:**

‚Ä¢ **C√≥digo de Aguas (DFL N¬∞ 1122/1981)**: Regula el derecho de aprovechamiento de aguas y su administraci√≥n.

‚Ä¢ **Ley 21.064**: Modifica el C√≥digo de Aguas para fortalecer la gesti√≥n y protecci√≥n de recursos h√≠dricos.

‚Ä¢ **Derechos de Aprovechamiento**: Se requiere solicitar derechos ante la Direcci√≥n General de Aguas (DGA).

‚Ä¢ **Caudal Ecol√≥gico**: Obligatorio mantener un caudal m√≠nimo para proteger el ecosistema.

‚Ä¢ **Sanciones**: Multas de 5 a 1000 UTM por uso no autorizado del agua.

**Recomendaci√≥n**: Siempre verificar la disponibilidad h√≠drica antes de solicitar derechos de aprovechamiento."""
    
    elif any(word in query_lower for word in ['ambiental', 'medio ambiente', 'impacto']):
        return """**Marco Legal Ambiental en Chile:**

‚Ä¢ **Ley 19.300 (Bases Generales del Medio Ambiente)**: Marco principal de la legislaci√≥n ambiental.

‚Ä¢ **SEIA (Sistema de Evaluaci√≥n de Impacto Ambiental)**: Obligatorio para proyectos que puedan causar impacto ambiental.

‚Ä¢ **RCA (Resoluci√≥n de Calificaci√≥n Ambiental)**: Autorizaci√≥n ambiental requerida para operar.

‚Ä¢ **SMA (Superintendencia del Medio Ambiente)**: Fiscaliza el cumplimiento de la normativa.

‚Ä¢ **Tipos de Evaluaci√≥n**: EIA (Estudio) o DIA (Declaraci√≥n) seg√∫n el proyecto.

**Importante**: El incumplimiento puede resultar en multas millonarias y cierre temporal."""
    
    elif any(word in query_lower for word in ['residuo', 'basura', 'desecho']):
        return """**Gesti√≥n de Residuos en Chile:**

‚Ä¢ **Ley 20.920 (REP)**: Establece responsabilidad extendida del productor.

‚Ä¢ **DS 1/2013**: Reglamenta residuos peligrosos y su manejo.

‚Ä¢ **Plan de Manejo**: Obligatorio para generadores de residuos peligrosos.

‚Ä¢ **Transporte**: Solo empresas autorizadas pueden transportar residuos peligrosos.

‚Ä¢ **Disposici√≥n Final**: Debe realizarse en sitios autorizados por la autoridad sanitaria.

**Sanciones**: Multas de hasta 10,000 UTM por manejo inadecuado de residuos peligrosos."""
    
    elif any(word in query_lower for word in ['aire', 'atmosfer', 'emision', 'contamina']):
        return """**Calidad del Aire y Emisiones:**

‚Ä¢ **D.S. 59/1998**: Establece la norma de calidad primaria para PM10.

‚Ä¢ **D.S. 12/2011**: Norma primaria de calidad ambiental para material particulado fino PM2,5.

‚Ä¢ **Planes de Descontaminaci√≥n**: Obligatorios en zonas saturadas o latentes.

‚Ä¢ **Monitoreo de Emisiones**: Empresas deben reportar emisiones atmosf√©ricas.

‚Ä¢ **Compensaci√≥n de Emisiones**: Requerida en zonas saturadas.

**Sanciones**: Multas de hasta 10,000 UTM por incumplimiento de normas de emisi√≥n."""
    
    elif any(word in query_lower for word in ['ruido', 'sonoro', 'acustic']):
        return """**Contaminaci√≥n Ac√∫stica:**

‚Ä¢ **D.S. 38/2011**: Norma de emisi√≥n de ruidos generados por fuentes fijas.

‚Ä¢ **L√≠mites de Ruido**: Var√≠an seg√∫n zona (residencial, comercial, industrial).

‚Ä¢ **Horarios**: Restricciones especiales para per√≠odo nocturno.

‚Ä¢ **Medici√≥n**: Debe realizarse seg√∫n metodolog√≠a oficial.

‚Ä¢ **Plan de Reducci√≥n**: Obligatorio si se superan l√≠mites permitidos.

**Importante**: Las multas pueden llegar hasta 1,000 UTM por infracciones graves."""
    
    elif any(word in query_lower for word in ['suelo', 'contamina', 'tierra']):
        return """**Protecci√≥n del Suelo:**

‚Ä¢ **D.S. 4/2009**: Reglamento para el manejo de lodos generados en plantas de tratamiento.

‚Ä¢ **Caracterizaci√≥n de Suelos**: Obligatoria antes de remediar sitios contaminados.

‚Ä¢ **Plan de Descontaminaci√≥n**: Requerido para sitios con contaminaci√≥n confirmada.

‚Ä¢ **Valores de Referencia**: Establecidos seg√∫n uso de suelo (residencial, industrial, etc.).

‚Ä¢ **Remedaci√≥n**: Debe alcanzar niveles seguros seg√∫n normativa.

**Nota**: La responsabilidad de remediar puede ser del propietario actual o hist√≥rico."""
    
    else:
        return f"""**An√°lisis Legal General:**

Su consulta sobre "{query}" se enmarca en la legislaci√≥n ambiental chilena vigente.

‚Ä¢ **Marco Normativo**: Regulado por leyes ambientales y sectoriales espec√≠ficas.

‚Ä¢ **Autoridad Competente**: Depende del tipo de actividad (SEA, SMA, SEREMI, etc.).

‚Ä¢ **Procedimiento**: Evaluar requisitos espec√≠ficos seg√∫n la actividad.

‚Ä¢ **Cumplimiento**: Mantener documentaci√≥n actualizada y reportes peri√≥dicos.

‚Ä¢ **Fiscalizaci√≥n**: La SMA puede realizar inspecciones sin previo aviso.

**Recomendaci√≥n**: Solicite asesor√≠a especializada para casos espec√≠ficos.

*Esta respuesta es de car√°cter informativo. Para decisiones importantes, consulte con un abogado especializado.*"""

def generar_respuesta_empresarial(empresa: str, query: str, tipo: str, ubicacion: str = None) -> str:
    """Genera respuestas espec√≠ficas para empresas"""
    ubicacion_info = ""
    if ubicacion and tipo == "proyecto":
        ubicacion_info = f"""

‚Ä¢ **üìç An√°lisis de Ubicaci√≥n**: {ubicacion}
  - Verificar zonificaci√≥n y ordenanzas municipales locales
  - Evaluar cercan√≠a a √°reas protegidas o sensibles (SNASPE)
  - Considerar normativas ambientales espec√≠ficas de la regi√≥n
  - Revisar planes reguladores comunales vigentes
  - Identificar posibles restricciones territoriales"""
    
    return f"""**An√°lisis {tipo.title()} - {empresa}:**

Consulta espec√≠fica: "{query}"

‚Ä¢ **Tipo de An√°lisis**: {tipo.title()}
‚Ä¢ **Empresa**: {empresa}
‚Ä¢ **Marco Legal Aplicable**: Normativa ambiental sectorial{ubicacion_info}

**Recomendaciones Espec√≠ficas:**
‚Ä¢ Verificar cumplimiento de obligaciones ambientales vigentes
‚Ä¢ Mantener al d√≠a los permisos y autorizaciones sectoriales
‚Ä¢ Implementar sistemas de monitoreo y seguimiento
‚Ä¢ Capacitar al personal en normativa ambiental
‚Ä¢ Establecer procedimientos de emergencia ambiental

**Pr√≥ximos Pasos:**
‚Ä¢ Realizar auditor√≠a de cumplimiento ambiental
‚Ä¢ Evaluar riesgos regulatorios espec√≠ficos
‚Ä¢ Implementar plan de mejora continua
‚Ä¢ Mantener registro de actividades ambientales

**Aspectos Cr√≠ticos a Considerar:**
‚Ä¢ Vigencia de permisos ambientales
‚Ä¢ Cumplimiento de compromisos RCA
‚Ä¢ Reportes peri√≥dicos a autoridades
‚Ä¢ Manejo de residuos y emisiones

*Para un an√°lisis detallado, se requiere revisi√≥n de documentaci√≥n espec√≠fica de la empresa.*"""

def generar_referencias_legales(query: str):
    """Genera referencias legales basadas en la consulta"""
    query_lower = query.lower()
    
    if any(word in query_lower for word in ['agua', 'hidrico']):
        return [
            {
                "title": "C√≥digo de Aguas (DFL N¬∞ 1122/1981)",
                "description": "Marco legal principal que regula los derechos de aprovechamiento de aguas en Chile.",
                "url": "https://www.bcn.cl/leychile/navegar?idNorma=5605"
            },
            {
                "title": "Direcci√≥n General de Aguas (DGA)",
                "description": "Organismo encargado de administrar los recursos h√≠dricos del pa√≠s.",
                "url": "https://www.dga.cl/"
            }
        ]
    
    elif any(word in query_lower for word in ['ambiental', 'medio ambiente']):
        return [
            {
                "title": "Ley 19.300 - Bases Generales del Medio Ambiente",
                "description": "Marco legal principal de la legislaci√≥n ambiental chilena.",
                "url": "https://www.bcn.cl/leychile/navegar?idNorma=30667"
            },
            {
                "title": "Sistema de Evaluaci√≥n de Impacto Ambiental (SEIA)",
                "description": "Portal oficial para tramitaci√≥n de proyectos ambientales.",
                "url": "https://seia.sea.gob.cl/"
            }
        ]
    
    elif any(word in query_lower for word in ['residuo', 'basura']):
        return [
            {
                "title": "Ley 20.920 - Responsabilidad Extendida del Productor",
                "description": "Marco legal para la gesti√≥n de residuos y reciclaje.",
                "url": "https://www.bcn.cl/leychile/navegar?idNorma=1090894"
            },
            {
                "title": "Ministerio del Medio Ambiente - Residuos",
                "description": "Informaci√≥n oficial sobre gesti√≥n de residuos.",
                "url": "https://mma.gob.cl/economia-circular/gestion-de-residuos/"
            }
        ]
    
    else:
        return [
            {
                "title": "Biblioteca del Congreso Nacional",
                "description": "Compilaci√≥n completa de leyes chilenas vigentes.",
                "url": "https://www.bcn.cl/leychile/"
            },
            {
                "title": "Ministerio del Medio Ambiente",
                "description": "Informaci√≥n oficial sobre normativas ambientales.",
                "url": "https://mma.gob.cl/"
            }
        ]

def generar_referencias_ambientales(query: str):
    """Genera referencias espec√≠ficas para consultas ambientales"""
    return [
        {
            "title": "Superintendencia del Medio Ambiente (SMA)",
            "description": "Organismo fiscalizador del cumplimiento de la normativa ambiental.",
            "url": "https://www.sma.gob.cl/"
        },
        {
            "title": "Servicio de Evaluaci√≥n Ambiental (SEA)",
            "description": "Administra el Sistema de Evaluaci√≥n de Impacto Ambiental.",
            "url": "https://www.sea.gob.cl/"
        },
        {
            "title": "Portal de Transparencia Ambiental",
            "description": "Acceso p√∫blico a informaci√≥n ambiental de empresas y proyectos.",
            "url": "https://sinia.mma.gob.cl/"
        }
    ]

# Endpoint de prueba para verificar conectividad
@app.get("/test")
async def test_endpoint():
    return {"message": "MERLIN backend funcionando correctamente", "version": "1.0"}

@app.get("/health")
async def health_check():
    return {
        "status": "ok", 
        "message": "Servidor funcionando correctamente",
        "mode": "simplificado",
        "endpoints": ["/", "/consulta", "/test", "/health"]
    }

# Endpoint adicional para an√°lisis general (compatibilidad)
@app.post("/analisis_general/")
async def analisis_general(query: str = Form(..., alias="query_box")):
    """Endpoint de compatibilidad para an√°lisis general"""
    try:
        respuesta = generar_respuesta_legal_general(query)
        referencias = generar_referencias_legales(query)
        
        return JSONResponse({
            "success": True,
            "respuesta": respuesta,
            "referencias": referencias
        })
        
    except Exception as e:
        return JSONResponse({
            "success": False,
            "error": f"Error al procesar la consulta: {str(e)}"
        }, status_code=500)

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Iniciando servidor MERLIN en puerto 8000...")
    uvicorn.run(app, host="0.0.0.0", port=8000) 