# main.py - MERLIN con integraci√≥n SEIA
from fastapi import FastAPI, Request
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from typing import Optional
import os
import sys

# Importar scraper con fallback ultra-seguro
try:
    from scrapers.seia_safe import obtener_informacion_proyecto_seia_safe as obtener_informacion_proyecto_seia
    SEIA_DISPONIBLE = True
    print("‚úÖ Scraper SEIA ultra-seguro disponible")
except ImportError:
    # Fallback interno si no existe el archivo
    def obtener_informacion_proyecto_seia(nombre_empresa: str):
        return {
            'success': False,
            'error': 'SEIA no disponible en este momento',
            'data': None
        }
    SEIA_DISPONIBLE = False
    print("‚ö†Ô∏è Scraper SEIA no disponible, funcionando en modo b√°sico")

app = FastAPI(
    title="MERLIN - Asesor Legal Ambiental Inteligente",
    version="2.0",
    description="Sistema de consultas legales ambientales con integraci√≥n SEIA"
)

# Configurar carpetas est√°ticas y plantillas HTML
try:
    app.mount("/static", StaticFiles(directory="static"), name="static")
    templates = Jinja2Templates(directory="templates")
    print("‚úÖ Archivos est√°ticos y templates configurados")
except Exception as e:
    print(f"‚ö†Ô∏è Error configurando archivos est√°ticos: {e}")
    # Crear templates b√°sicos si no existen
    templates = None

# Variables de estado del sistema
print("üöÄ Iniciando MERLIN - Asesor Legal Ambiental v2.0")
print("‚ö†Ô∏è Funcionando en modo simplificado (sin dependencias complejas)")

# Evento de startup
@app.on_event("startup")
async def startup_event():
    """Inicializaci√≥n del sistema al arrancar"""
    try:
        print("üîß Ejecutando verificaciones de startup...")
        
        # Test b√°sico de funciones principales
        test_response = generar_respuesta_legal_general("test startup")
        if test_response:
            print("‚úÖ Funciones principales verificadas")
        else:
            print("‚ö†Ô∏è Warning: Funciones principales no responden correctamente")
            
        # Test del scraper SEIA
        if SEIA_DISPONIBLE:
            try:
                test_seia = obtener_informacion_proyecto_seia("test")
                print("‚úÖ Scraper SEIA verificado")
            except Exception as e:
                print(f"‚ö†Ô∏è Warning: Scraper SEIA con problemas: {e}")
        
        print("üéØ MERLIN iniciado correctamente")
        
    except Exception as e:
        print(f"‚ùå Error en startup: {e}")
        # No fallar el startup, solo logear

# Ruta ra√≠z que carga la interfaz visual
@app.get("/", response_class=HTMLResponse)
async def render_form(request: Request):
    """Renderizar la interfaz principal de MERLIN"""
    try:
        if templates is None:
            # Fallback si no hay templates
            return HTMLResponse("""
            <html>
                <head><title>MERLIN - Error</title></head>
                <body>
                    <h1>MERLIN - Asesor Legal Ambiental</h1>
                    <p>Error: Templates no disponibles</p>
                    <p>Usar endpoint /test para verificar funcionamiento</p>
                </body>
            </html>
            """)
        
        return templates.TemplateResponse("index.html", {"request": request})
    except Exception as e:
        print(f"Error rendering template: {e}")
        return HTMLResponse(f"""
        <html>
            <head><title>MERLIN - Error</title></head>
            <body>
                <h1>MERLIN - Asesor Legal Ambiental</h1>
                <p>Error: {str(e)}</p>
                <p><a href="/test">Probar endpoint /test</a></p>
                <p><a href="/health">Ver estado del sistema</a></p>
            </body>
        </html>
        """, status_code=500)

# Endpoint unificado para todas las consultas
@app.post("/consulta")
async def consulta_unificada(request: Request):
    """
    Endpoint unificado que maneja todos los tipos de consulta
    """
    try:
        # Obtener datos JSON del request
        data = await request.json()
        query = data.get("query", "").strip()
        query_type = data.get("query_type", "general")
        company_name = data.get("company_name", "").strip()
        project_location = data.get("project_location", "").strip()
        
        # Validaciones b√°sicas
        if not query:
            return JSONResponse({
                "success": False,
                "error": "La consulta no puede estar vac√≠a"
            }, status_code=400)
        
        if len(query) > 5000:
            return JSONResponse({
                "success": False,
                "error": "La consulta es demasiado larga (m√°ximo 5000 caracteres)"
            }, status_code=400)
        
        # Procesar seg√∫n el tipo de consulta
        if query_type == "general":
            try:
                # An√°lisis general
                respuesta = generar_respuesta_legal_general(query)
                referencias = generar_referencias_legales(query)
                
                return JSONResponse({
                    "success": True,
                    "respuesta": respuesta,
                    "referencias": referencias
                })
            except Exception as e:
                print(f"Error en consulta general: {e}")
                return JSONResponse({
                    "success": False,
                    "error": "Error al procesar la consulta general. Por favor intente nuevamente."
                }, status_code=500)
                
        elif query_type in ["empresa", "proyecto"]:
            # An√°lisis empresarial/proyecto
            if not company_name:
                return JSONResponse({
                    "success": False,
                    "error": "El nombre de la empresa es requerido"
                }, status_code=400)
            
            # Obtener informaci√≥n real del SEIA si es un proyecto y est√° disponible
            seia_info = None
            if query_type == "proyecto" and SEIA_DISPONIBLE:
                try:
                    print(f"Consultando SEIA para empresa: {company_name}")
                    seia_result = obtener_informacion_proyecto_seia(company_name)
                    if seia_result and seia_result.get('success'):
                        seia_info = seia_result.get('data')
                        print(f"Informaci√≥n del SEIA obtenida exitosamente")
                    else:
                        print(f"No se pudo obtener informaci√≥n del SEIA: {seia_result.get('error', 'Error desconocido') if seia_result else 'Sin respuesta'}")
                except Exception as e:
                    print(f"Error al consultar SEIA: {e}")
                    seia_info = None
            
            try:
                respuesta = generar_respuesta_empresarial(company_name, query, query_type, project_location, seia_info)
                
                response_data = {
                    "success": True,
                    "respuesta": respuesta,
                    "referencias": generar_referencias_ambientales(query)
                }
                
                # Agregar informaci√≥n de empresa desde SEIA si est√° disponible
                if seia_info:
                    try:
                        empresa_info = construir_info_empresa_seia(seia_info, company_name, query_type)
                        response_data["empresa_info"] = empresa_info
                        
                        # Agregar informaci√≥n de ubicaci√≥n desde SEIA
                        ubicacion_info = construir_info_ubicacion_seia(seia_info, project_location)
                        if ubicacion_info:
                            response_data["ubicacion"] = ubicacion_info
                    except Exception as e:
                        print(f"Error al procesar informaci√≥n del SEIA: {e}")
                        # Continuar sin informaci√≥n del SEIA
                        pass
                else:
                    # Informaci√≥n b√°sica si no se encuentra en SEIA
                    response_data["empresa_info"] = {
                        "nombre": company_name,
                        "tipo": query_type,
                        "estado": "Informaci√≥n b√°sica (no encontrada en SEIA)"
                    }
                    
                    # Agregar informaci√≥n de ubicaci√≥n manual si est√° disponible
                    if project_location:
                        response_data["ubicacion"] = {
                            "direccion": project_location,
                            "tipo": "Ubicaci√≥n Manual",
                            "coordenadas": "Ver en mapa para detalles"
                        }
                
                return JSONResponse(response_data)
                
            except Exception as e:
                print(f"Error en consulta empresarial: {e}")
                return JSONResponse({
                    "success": False,
                    "error": "Error al procesar la consulta empresarial. Por favor intente nuevamente."
                }, status_code=500)
        
        else:
            return JSONResponse({
                "success": False,
                "error": "Tipo de consulta no v√°lido"
            }, status_code=400)
        
    except ValueError as e:
        print(f"Error de datos JSON: {e}")
        return JSONResponse({
            "success": False,
            "error": "Formato de datos no v√°lido"
        }, status_code=400)
    except Exception as e:
        print(f"Error general en endpoint: {e}")
        return JSONResponse({
            "success": False,
            "error": "Error interno del servidor. Por favor intente nuevamente."
        }, status_code=500)

def generar_respuesta_legal_general(query: str) -> str:
    """Genera respuestas legales generales basadas en la consulta"""
    try:
        query_lower = query.lower()
        
        if any(word in query_lower for word in ['agua', 'hidrico', 'recurso hidrico']):
            return """**Marco Legal de Recursos H√≠dricos en Chile:**

‚Ä¢ **C√≥digo de Aguas (DFL N¬∞ 1122/1981)**: Regula el derecho de aprovechamiento de aguas y su administraci√≥n.

‚Ä¢ **Ley 21.064**: Modifica el C√≥digo de Aguas para fortalecer la gesti√≥n y protecci√≥n de recursos h√≠dricos.

‚Ä¢ **Derechos de Aprovechamiento**: Se requiere solicitar derechos ante la Direcci√≥n General de Aguas (DGA).

‚Ä¢ **Caudal Ecol√≥gico**: Obligatorio mantener un caudal m√≠nimo para proteger el ecosistema.

‚Ä¢ **Sanciones**: Multas de 5 a 1000 UTM por uso no autorizado del agua.

**Recomendaci√≥n**: Siempre verificar la disponibilidad h√≠drica antes de solicitar derechos de aprovechamiento."""
        
        elif any(word in query_lower for word in ['ambiental', 'medio ambiente', 'impacto']):
            return """**Marco Legal Ambiental en Chile:**

‚Ä¢ **Ley 19.300 (Bases Generales del Medio Ambiente)**: Marco principal de la legislaci√≥n ambiental.

‚Ä¢ **SEIA (Sistema de Evaluaci√≥n de Impacto Ambiental)**: Obligatorio para proyectos que puedan causar impacto ambiental.

‚Ä¢ **RCA (Resoluci√≥n de Calificaci√≥n Ambiental)**: Autorizaci√≥n ambiental requerida para operar.

‚Ä¢ **SMA (Superintendencia del Medio Ambiente)**: Fiscaliza el cumplimiento de la normativa.

‚Ä¢ **Tipos de Evaluaci√≥n**: EIA (Estudio) o DIA (Declaraci√≥n) seg√∫n el proyecto.

**Importante**: El incumplimiento puede resultar en multas millonarias y cierre temporal."""
        
        elif any(word in query_lower for word in ['residuo', 'basura', 'desecho']):
            return """**Gesti√≥n de Residuos en Chile:**

‚Ä¢ **Ley 20.920 (REP)**: Establece responsabilidad extendida del productor.

‚Ä¢ **DS 1/2013**: Reglamenta residuos peligrosos y su manejo.

‚Ä¢ **Plan de Manejo**: Obligatorio para generadores de residuos peligrosos.

‚Ä¢ **Transporte**: Solo empresas autorizadas pueden transportar residuos peligrosos.

‚Ä¢ **Disposici√≥n Final**: Debe realizarse en sitios autorizados por la autoridad sanitaria.

**Sanciones**: Multas de hasta 10,000 UTM por manejo inadecuado de residuos peligrosos."""
        
        elif any(word in query_lower for word in ['aire', 'atmosfer', 'emision', 'contamina']):
            return """**Calidad del Aire y Emisiones:**

‚Ä¢ **D.S. 59/1998**: Establece la norma de calidad primaria para PM10.

‚Ä¢ **D.S. 12/2011**: Norma primaria de calidad ambiental para material particulado fino PM2,5.

‚Ä¢ **Planes de Descontaminaci√≥n**: Obligatorios en zonas saturadas o latentes.

‚Ä¢ **Monitoreo de Emisiones**: Empresas deben reportar emisiones atmosf√©ricas.

‚Ä¢ **Compensaci√≥n de Emisiones**: Requerida en zonas saturadas.

**Sanciones**: Multas de hasta 10,000 UTM por incumplimiento de normas de emisi√≥n."""
        
        elif any(word in query_lower for word in ['ruido', 'sonoro', 'acustic']):
            return """**Contaminaci√≥n Ac√∫stica:**

‚Ä¢ **D.S. 38/2011**: Norma de emisi√≥n de ruidos generados por fuentes fijas.

‚Ä¢ **L√≠mites de Ruido**: Var√≠an seg√∫n zona (residencial, comercial, industrial).

‚Ä¢ **Horarios**: Restricciones especiales para per√≠odo nocturno.

‚Ä¢ **Medici√≥n**: Debe realizarse seg√∫n metodolog√≠a oficial.

‚Ä¢ **Plan de Reducci√≥n**: Obligatorio si se superan l√≠mites permitidos.

**Importante**: Las multas pueden llegar hasta 1,000 UTM por infracciones graves."""
        
        elif any(word in query_lower for word in ['suelo', 'contamina', 'tierra']):
            return """**Protecci√≥n del Suelo:**

‚Ä¢ **D.S. 4/2009**: Reglamento para el manejo de lodos generados en plantas de tratamiento.

‚Ä¢ **Caracterizaci√≥n de Suelos**: Obligatoria antes de remediar sitios contaminados.

‚Ä¢ **Plan de Descontaminaci√≥n**: Requerido para sitios con contaminaci√≥n confirmada.

‚Ä¢ **Valores de Referencia**: Establecidos seg√∫n uso de suelo (residencial, industrial, etc.).

‚Ä¢ **Remedaci√≥n**: Debe alcanzar niveles seguros seg√∫n normativa.

**Nota**: La responsabilidad de remediar puede ser del propietario actual o hist√≥rico."""
        
        else:
            return f"""**An√°lisis Legal General:**

Su consulta sobre "{query}" se enmarca en la legislaci√≥n ambiental chilena vigente.

‚Ä¢ **Marco Normativo**: Regulado por leyes ambientales y sectoriales espec√≠ficas.

‚Ä¢ **Autoridad Competente**: Depende del tipo de actividad (SEA, SMA, SEREMI, etc.).

‚Ä¢ **Procedimiento**: Evaluar requisitos espec√≠ficos seg√∫n la actividad.

‚Ä¢ **Cumplimiento**: Mantener documentaci√≥n actualizada y reportes peri√≥dicos.

‚Ä¢ **Fiscalizaci√≥n**: La SMA puede realizar inspecciones sin previo aviso.

**Recomendaci√≥n**: Solicite asesor√≠a especializada para casos espec√≠ficos.

*Esta respuesta es de car√°cter informativo. Para decisiones importantes, consulte con un abogado especializado.*"""
    
    except Exception as e:
        print(f"Error en generar_respuesta_legal_general: {e}")
        return f"""**Error al procesar la consulta**:

Ha ocurrido un error interno al procesar su consulta: {query}

Por favor, intente reformular su pregunta o contacte al administrador del sistema.

**Informaci√≥n de apoyo**:
‚Ä¢ Visite el sitio web oficial del SEA: www.sea.gob.cl
‚Ä¢ Consulte la biblioteca digital de la SMA: www.sma.gob.cl
‚Ä¢ Para consultas espec√≠ficas, contacte un abogado ambiental especializado.

*Disculpe las molestias ocasionadas.*"""

def generar_respuesta_empresarial(empresa: str, query: str, tipo: str, ubicacion: str = None, seia_info: dict = None) -> str:
    """Genera respuestas espec√≠ficas para empresas"""
    
    # Informaci√≥n del SEIA si est√° disponible
    seia_info_text = ""
    if seia_info:
        seia_info_text = f"""

‚Ä¢ **üìä Informaci√≥n del SEIA**:
  - C√≥digo Expediente: {seia_info.get('codigo_expediente', 'No disponible')}
  - Estado del Proyecto: {seia_info.get('estado', 'No disponible')}
  - Regi√≥n: {seia_info.get('region', 'No disponible')}
  - Tipo de Proyecto: {seia_info.get('tipo', 'No disponible')}"""
        
        if 'titular' in seia_info and seia_info['titular']:
            titular = seia_info['titular']
            seia_info_text += f"""
  - Titular: {titular.get('nombre', titular.get('razon_social', 'No disponible'))}"""
            if 'rut' in titular:
                seia_info_text += f"""
  - RUT: {titular['rut']}"""
    
    # Informaci√≥n de ubicaci√≥n
    ubicacion_info = ""
    if seia_info and 'ubicacion' in seia_info and seia_info['ubicacion']:
        ubicacion_seia = seia_info['ubicacion']
        direccion = ubicacion_seia.get('ubicacion_proyecto') or ubicacion_seia.get('direccion_proyecto')
        
        if direccion:
            ubicacion_info = f"""

‚Ä¢ **üìç Ubicaci√≥n del Proyecto (SEIA)**: {direccion}"""
            if 'comuna' in ubicacion_seia:
                ubicacion_info += f"""
  - Comuna: {ubicacion_seia['comuna']}"""
            if 'region' in ubicacion_seia:
                ubicacion_info += f"""
  - Regi√≥n: {ubicacion_seia['region']}"""
            
            ubicacion_info += f"""
  - Verificar zonificaci√≥n y ordenanzas municipales locales
  - Evaluar cercan√≠a a √°reas protegidas o sensibles (SNASPE)
  - Considerar normativas ambientales espec√≠ficas de la regi√≥n
  - Revisar planes reguladores comunales vigentes
  - Identificar posibles restricciones territoriales"""
    
    elif ubicacion and tipo == "proyecto":
        ubicacion_info = f"""

‚Ä¢ **üìç An√°lisis de Ubicaci√≥n**: {ubicacion}
  - Verificar zonificaci√≥n y ordenanzas municipales locales
  - Evaluar cercan√≠a a √°reas protegidas o sensibles (SNASPE)
  - Considerar normativas ambientales espec√≠ficas de la regi√≥n
  - Revisar planes reguladores comunales vigentes
  - Identificar posibles restricciones territoriales"""
    
    # An√°lisis espec√≠fico basado en informaci√≥n del SEIA
    analisis_seia = ""
    if seia_info:
        estado = seia_info.get('estado', '').lower()
        if 'aprobado' in estado:
            analisis_seia = f"""

‚Ä¢ **Estado del Proyecto**: APROBADO - RCA vigente
  - Verificar cumplimiento de compromisos ambientales
  - Revisar condiciones y medidas establecidas en la RCA
  - Mantener reportes de seguimiento actualizados"""
        elif 'calificado' in estado:
            analisis_seia = f"""

‚Ä¢ **Estado del Proyecto**: CALIFICADO FAVORABLEMENTE
  - RCA otorgada - proyecto puede ejecutarse
  - Cumplir estrictamente con compromisos ambientales
  - Implementar Plan de Seguimiento Ambiental"""
        elif 'evaluaci√≥n' in estado or 'admisible' in estado:
            analisis_seia = f"""

‚Ä¢ **Estado del Proyecto**: EN EVALUACI√ìN
  - Proyecto en proceso de evaluaci√≥n ambiental
  - Seguir requerimientos de la autoridad ambiental
  - Preparar respuestas a observaciones ciudadanas"""
        elif 'rechazado' in estado or 'no calificado' in estado:
            analisis_seia = f"""

‚Ä¢ **Estado del Proyecto**: NO CALIFICADO/RECHAZADO
  - Proyecto no cuenta con aprobaci√≥n ambiental
  - Revisar causales de rechazo
  - Evaluar posibilidad de nuevo ingreso con modificaciones"""
    
    return f"""**An√°lisis {tipo.title()} - {empresa}:**

Consulta espec√≠fica: "{query}"

‚Ä¢ **Tipo de An√°lisis**: {tipo.title()}
‚Ä¢ **Empresa**: {empresa}
‚Ä¢ **Marco Legal Aplicable**: Normativa ambiental sectorial{seia_info_text}{ubicacion_info}{analisis_seia}

**Recomendaciones Espec√≠ficas:**
‚Ä¢ Verificar cumplimiento de obligaciones ambientales vigentes
‚Ä¢ Mantener al d√≠a los permisos y autorizaciones sectoriales
‚Ä¢ Implementar sistemas de monitoreo y seguimiento
‚Ä¢ Capacitar al personal en normativa ambiental
‚Ä¢ Establecer procedimientos de emergencia ambiental

**Pr√≥ximos Pasos:**
‚Ä¢ Realizar auditor√≠a de cumplimiento ambiental
‚Ä¢ Evaluar riesgos regulatorios espec√≠ficos
‚Ä¢ Implementar plan de mejora continua
‚Ä¢ Mantener registro de actividades ambientales

**Aspectos Cr√≠ticos a Considerar:**
‚Ä¢ Vigencia de permisos ambientales
‚Ä¢ Cumplimiento de compromisos RCA
‚Ä¢ Reportes peri√≥dicos a autoridades
‚Ä¢ Manejo de residuos y emisiones

*An√°lisis basado en informaci√≥n oficial del SEIA. Para un an√°lisis detallado, se requiere revisi√≥n de documentaci√≥n espec√≠fica de la empresa.*"""

def construir_info_empresa_seia(seia_info: dict, nombre_empresa: str, tipo: str) -> dict:
    """
    Construye la informaci√≥n de empresa a partir de los datos del SEIA
    """
    try:
        info_empresa = {
            "nombre": nombre_empresa,
            "tipo": tipo,
            "estado": "Informaci√≥n obtenida del SEIA"
        }
        
        # Verificar que seia_info es un diccionario v√°lido
        if not isinstance(seia_info, dict):
            return info_empresa
        
        # Extraer informaci√≥n del titular si est√° disponible
        if seia_info.get('titular') and isinstance(seia_info['titular'], dict):
            titular = seia_info['titular']
            
            # Usar get() para evitar KeyError
            if titular.get('nombre_fantasia'):
                info_empresa['nombre_fantasia'] = str(titular['nombre_fantasia'])
            if titular.get('razon_social'):
                info_empresa['razon_social'] = str(titular['razon_social'])
            if titular.get('rut'):
                info_empresa['rut'] = str(titular['rut'])
            if titular.get('direccion'):
                info_empresa['direccion'] = str(titular['direccion'])
            if titular.get('telefono'):
                info_empresa['telefono'] = str(titular['telefono'])
            if titular.get('email'):
                info_empresa['email'] = str(titular['email'])
        
        # Agregar informaci√≥n adicional del proyecto
        if seia_info.get('codigo_expediente'):
            info_empresa['codigo_expediente'] = str(seia_info['codigo_expediente'])
        if seia_info.get('estado'):
            info_empresa['estado_proyecto'] = str(seia_info['estado'])
        if seia_info.get('region'):
            info_empresa['region'] = str(seia_info['region'])
        if seia_info.get('link_expediente'):
            info_empresa['link_seia'] = str(seia_info['link_expediente'])
        
        return info_empresa
        
    except Exception as e:
        print(f"Error en construir_info_empresa_seia: {e}")
        return {
            "nombre": nombre_empresa,
            "tipo": tipo,
            "estado": "Error al procesar informaci√≥n del SEIA",
            "error": str(e)
        }

def construir_info_ubicacion_seia(seia_info: dict, ubicacion_manual: str = None) -> dict:
    """
    Construye la informaci√≥n de ubicaci√≥n a partir de los datos del SEIA
    """
    try:
        ubicacion_info = {
            "tipo": "Ubicaci√≥n desde SEIA",
            "fuente": "Sistema de Evaluaci√≥n de Impacto Ambiental"
        }
        
        # Verificar que seia_info es un diccionario v√°lido
        if not isinstance(seia_info, dict):
            if ubicacion_manual:
                return {
                    "direccion": ubicacion_manual,
                    "tipo": "Ubicaci√≥n Manual",
                    "fuente": "Ingresada por el usuario"
                }
            return None
        
        # Priorizar ubicaci√≥n del SEIA
        if seia_info.get('ubicacion') and isinstance(seia_info['ubicacion'], dict):
            ubicacion_seia = seia_info['ubicacion']
            
            if ubicacion_seia.get('ubicacion_proyecto'):
                ubicacion_info['direccion'] = str(ubicacion_seia['ubicacion_proyecto'])
            elif ubicacion_seia.get('direccion_proyecto'):
                ubicacion_info['direccion'] = str(ubicacion_seia['direccion_proyecto'])
            
            if ubicacion_seia.get('comuna'):
                ubicacion_info['comuna'] = str(ubicacion_seia['comuna'])
            if ubicacion_seia.get('provincia'):
                ubicacion_info['provincia'] = str(ubicacion_seia['provincia'])
            if ubicacion_seia.get('region'):
                ubicacion_info['region'] = str(ubicacion_seia['region'])
            if ubicacion_seia.get('coordenadas'):
                ubicacion_info['coordenadas'] = str(ubicacion_seia['coordenadas'])
        
        # Si no hay ubicaci√≥n del SEIA pero hay direcci√≥n del titular
        if 'direccion' not in ubicacion_info and seia_info.get('titular'):
            titular = seia_info['titular']
            if isinstance(titular, dict) and titular.get('direccion'):
                ubicacion_info['direccion'] = str(titular['direccion'])
                ubicacion_info['tipo'] = "Direcci√≥n Casa Matriz (desde SEIA)"
        
        # Usar ubicaci√≥n manual como respaldo
        if 'direccion' not in ubicacion_info and ubicacion_manual:
            ubicacion_info['direccion'] = str(ubicacion_manual)
            ubicacion_info['tipo'] = "Ubicaci√≥n Manual"
            ubicacion_info['fuente'] = "Ingresada por el usuario"
        
        # Solo retornar si hay al menos una direcci√≥n
        if ubicacion_info.get('direccion'):
            return ubicacion_info
        
        return None
        
    except Exception as e:
        print(f"Error en construir_info_ubicacion_seia: {e}")
        if ubicacion_manual:
            return {
                "direccion": str(ubicacion_manual),
                "tipo": "Ubicaci√≥n Manual",
                "fuente": "Ingresada por el usuario (error en SEIA)",
                "error": str(e)
            }
        return None

def generar_referencias_legales(query: str):
    """Genera referencias legales basadas en la consulta"""
    try:
        if not query or not isinstance(query, str):
            return []
            
        query_lower = query.lower()
        
        if any(word in query_lower for word in ['agua', 'hidrico', 'recurso hidrico']):
            return [
                {
                    "title": "C√≥digo de Aguas (DFL N¬∞ 1122/1981)",
                    "description": "Marco legal principal que regula los derechos de aprovechamiento de aguas en Chile.",
                    "url": "https://www.bcn.cl/leychile/navegar?idNorma=5605"
                },
                {
                    "title": "Direcci√≥n General de Aguas (DGA)",
                    "description": "Organismo encargado de administrar los recursos h√≠dricos del pa√≠s.",
                    "url": "https://www.dga.cl/"
                }
            ]
        
        elif any(word in query_lower for word in ['ambiental', 'medio ambiente', 'impacto']):
            return [
                {
                    "title": "Ley 19.300 - Bases Generales del Medio Ambiente",
                    "description": "Marco legal principal de la legislaci√≥n ambiental chilena.",
                    "url": "https://www.bcn.cl/leychile/navegar?idNorma=30667"
                },
                {
                    "title": "Sistema de Evaluaci√≥n de Impacto Ambiental (SEIA)",
                    "description": "Portal oficial para tramitaci√≥n de proyectos ambientales.",
                    "url": "https://seia.sea.gob.cl/"
                }
            ]
        
        elif any(word in query_lower for word in ['residuo', 'basura', 'desecho']):
            return [
                {
                    "title": "Ley 20.920 - Responsabilidad Extendida del Productor",
                    "description": "Marco legal para la gesti√≥n de residuos y reciclaje.",
                    "url": "https://www.bcn.cl/leychile/navegar?idNorma=1090894"
                },
                {
                    "title": "Ministerio del Medio Ambiente - Residuos",
                    "description": "Informaci√≥n oficial sobre gesti√≥n de residuos.",
                    "url": "https://mma.gob.cl/economia-circular/gestion-de-residuos/"
                }
            ]
        
        else:
            return [
                {
                    "title": "Biblioteca del Congreso Nacional",
                    "description": "Compilaci√≥n completa de leyes chilenas vigentes.",
                    "url": "https://www.bcn.cl/leychile/"
                },
                {
                    "title": "Ministerio del Medio Ambiente",
                    "description": "Informaci√≥n oficial sobre normativas ambientales.",
                    "url": "https://mma.gob.cl/"
                }
            ]
    
    except Exception as e:
        print(f"Error en generar_referencias_legales: {e}")
        return [
            {
                "title": "Biblioteca del Congreso Nacional",
                "description": "Compilaci√≥n completa de leyes chilenas vigentes.",
                "url": "https://www.bcn.cl/leychile/"
            }
        ]

def generar_referencias_ambientales(query: str):
    """Genera referencias espec√≠ficas para consultas ambientales"""
    try:
        return [
            {
                "title": "Superintendencia del Medio Ambiente (SMA)",
                "description": "Organismo fiscalizador del cumplimiento de la normativa ambiental.",
                "url": "https://www.sma.gob.cl/"
            },
            {
                "title": "Servicio de Evaluaci√≥n Ambiental (SEA)",
                "description": "Administra el Sistema de Evaluaci√≥n de Impacto Ambiental.",
                "url": "https://www.sea.gob.cl/"
            },
            {
                "title": "Portal de Transparencia Ambiental",
                "description": "Acceso p√∫blico a informaci√≥n ambiental de empresas y proyectos.",
                "url": "https://sinia.mma.gob.cl/"
            }
        ]
    except Exception as e:
        print(f"Error en generar_referencias_ambientales: {e}")
        return [
            {
                "title": "Ministerio del Medio Ambiente",
                "description": "Informaci√≥n oficial sobre normativas ambientales.",
                "url": "https://mma.gob.cl/"
            }
        ]

# Endpoint de prueba para verificar conectividad
@app.get("/test")
async def test_endpoint():
    """Endpoint de diagn√≥stico completo"""
    try:
        diagnostics = {
            "status": "ok",
            "message": "MERLIN backend funcionando correctamente", 
            "version": "2.0",
            "timestamp": "2025-01-19",
            "system_info": {
                "seia_available": SEIA_DISPONIBLE,
                "templates_available": templates is not None,
                "python_version": sys.version.split()[0] if 'sys' in globals() else "unknown"
            }
        }
        
        # Test de funci√≥n principal
        try:
            test_response = generar_respuesta_legal_general("test")
            diagnostics["function_test"] = "ok" if test_response else "failed"
        except Exception as e:
            diagnostics["function_test"] = f"error: {str(e)}"
        
        # Test de SEIA si est√° disponible
        if SEIA_DISPONIBLE:
            try:
                seia_test = obtener_informacion_proyecto_seia("test")
                diagnostics["seia_test"] = "ok" if seia_test else "failed"
            except Exception as e:
                diagnostics["seia_test"] = f"error: {str(e)}"
        
        return diagnostics
        
    except Exception as e:
        return {
            "status": "error",
            "message": f"Error en diagn√≥stico: {str(e)}",
            "version": "2.0"
        }

@app.get("/health")
async def health_check():
    """Health check endpoint para Render"""
    try:
        # Test b√°sico de las funciones principales
        test_response = generar_respuesta_legal_general("test")
        if not test_response:
            raise Exception("Funci√≥n principal no responde")
            
        return {
            "status": "healthy", 
            "message": "MERLIN funcionando correctamente",
            "version": "2.0",
            "seia_available": SEIA_DISPONIBLE,
            "endpoints": ["/", "/consulta", "/test", "/health"],
            "timestamp": "2025-01-19"
        }
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "message": "Error en health check"
        }

# Endpoint adicional para an√°lisis general (compatibilidad)
@app.post("/analisis_general/")
async def analisis_general(request: Request):
    """Endpoint de compatibilidad para an√°lisis general"""
    try:
        # Obtener datos del request
        form_data = await request.form()
        query = form_data.get("query_box", "")
        
        if not query:
            return JSONResponse({
                "success": False,
                "error": "La consulta no puede estar vac√≠a"
            }, status_code=400)
        
        respuesta = generar_respuesta_legal_general(query)
        referencias = generar_referencias_legales(query)
        
        return JSONResponse({
            "success": True,
            "respuesta": respuesta,
            "referencias": referencias
        })
        
    except Exception as e:
        return JSONResponse({
            "success": False,
            "error": f"Error al procesar la consulta: {str(e)}"
        }, status_code=500)

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Iniciando servidor MERLIN en puerto 8000...")
    uvicorn.run(app, host="0.0.0.0", port=8000) 